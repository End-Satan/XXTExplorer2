local function table_deep_dump(tab)
	local ret_tab = {}
	local string_format = string.format
	local string_rep = string.rep
	local tostring = tostring
	local tonumber = tonumber
	local type = type
	local pairs = pairs
	local table_concat = table.concat
	local function _dump_t(st,tl,rt,deep)
		deep = tonumber(deep) or 0
		tl = tl or {}
		rt = rt or {}
		ret_tab[#ret_tab + 1] = "{ -- "
		ret_tab[#ret_tab + 1] = tostring(st)
		ret_tab[#ret_tab + 1] = "\n"
		for k, v in pairs(st or {}) do
			if type(v) ~= "table" then
				if type(k)=="string" then
					ret_tab[#ret_tab + 1] = string_format('%s[%q] = ', string_rep("\t", deep + 1), k)
				elseif type(k)=="number" or type(k)=="boolean" then
					ret_tab[#ret_tab + 1] = string_format('%s[%s] = ', string_rep("\t", deep + 1), tostring(k))
				else
					ret_tab[#ret_tab + 1] = string_format('%s[%q] = ', string_rep("\t", deep + 1), tostring(k))
				end
				if type(v)=="string" then
					ret_tab[#ret_tab + 1] = string_format('%q,\n', v)
				elseif type(v)=="number" or type(v)=="boolean" then
					ret_tab[#ret_tab + 1] = string_format('%s,\n', tostring(v))
				else
					ret_tab[#ret_tab + 1] = string_format('%q,\n', tostring(v))
				end
			else
				if tl[v] then
					rt[k] = tl[v]
					if type(k)=="string" then
						ret_tab[#ret_tab + 1] = string_format('%s[%q] = ', string_rep("\t", deep + 1), k)
					elseif type(k)=="number" or type(k)=="boolean" then
						ret_tab[#ret_tab + 1] = string_format('%s[%s] = ', string_rep("\t", deep + 1), tostring(k))
					else
						ret_tab[#ret_tab + 1] = string_format('%s[%q] = ', string_rep("\t", deep + 1), tostring(k))
					end
					if type(v)=="string" then
						ret_tab[#ret_tab + 1] = string_format('%q,\n', v)
					elseif type(v)=="number" or type(v)=="boolean" then
						ret_tab[#ret_tab + 1] = string_format('%s,\n', tostring(v))
					elseif v==json_null then
						ret_tab[#ret_tab + 1] = string_format('%s,\n', "json.null")
					else
						ret_tab[#ret_tab + 1] = string_format('%q,\n', tostring(v))
					end
				else
					if type(k)=="string" then
						ret_tab[#ret_tab + 1] = string_format('%s[%q] = ', string_rep("\t", deep + 1), k)
					elseif type(k)=="number" or type(k)=="boolean" then
						ret_tab[#ret_tab + 1] = string_format('%s[%s] = ', string_rep("\t", deep + 1), tostring(k))
					else
						ret_tab[#ret_tab + 1] = string_format('%s[%q] = ', string_rep("\t", deep + 1), tostring(k))
					end
					local rrt = {}
					tl[v] = rrt
					rt[k] = _dump_t(v, tl, rrt, deep + 1)
				end
			end
		end
		if deep==0 then
			ret_tab[#ret_tab + 1] = string_rep("\t", deep)
			ret_tab[#ret_tab + 1] = "}\n"
		else
			ret_tab[#ret_tab + 1] = string_rep("\t", deep)
			ret_tab[#ret_tab + 1] = "},\n"
		end
		return rt
	end
	_dump_t(tab)
	return table_concat(ret_tab)
end

return {
	name = "测试片段",
	arguments = {
		{type = "@pos@", title = "标题", hint = "选一个点"},
-- 		{type = "@color@", title = "标题", hint = "取一处颜色"},
		{type = "@poscolor@", title = "标题", hint = "再取一处位置及颜色"},
		{type = "@poscolors@", title = "标题", hint = "取多处位置和颜色"},
		{type = "@rect@", title = "标题", hint = "取区域"},
		{type = "@app@", title = "标题", hint = "选择一个 App"},
		{type = "@apps@", title = "标题", hint = "选择几个 App"},
		{type = "@loc@", hint = "选择一个 GPS 位置"},
		{type = "@key@", hint = "选择一个按键"},
	},
	generator = function(...)
		return tostring(table_deep_dump({...}))
	end,
}
